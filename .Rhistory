make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
file.copy("projects.bib", "_bibliography/projects.bib", overwrite = TRUE)
library(readxl)
make_bib <- function(data, file_path = "projects.bib") {
# Ensure data is sorted by 'theme'
if ("theme" %in% colnames(data)) {
sorted_data <- data[order(data$theme), ]
} else {
sorted_data <- data
}
# Open a connection to the output file
file_conn <- file(file_path, "w")
# Iterate over each row to create BibTeX entries
for (i in seq_len(nrow(sorted_data))) {
row <- sorted_data[i, ]
# Handle must be used for the BibTeX key
if (!"handle" %in% colnames(row)) {
stop("The data must have a 'handle' column for the BibTeX entry key.")
}
if (!"type" %in% colnames(row)) {
stop("The data must have a 'type' column for the BibTeX entry type.")
}
# Start the BibTeX entry
bib_entry <- paste0("@", row$type, "{", row$handle, ",\n")
# Loop through the columns and add each as a BibTeX field
for (col_name in colnames(row)) {
if (col_name %in% c("handle", "type")) next  # Skip handle and type for the key and entry type
# Get the value and format it
value <- row[[col_name]]
if (!is.na(value)) {
bib_entry <- paste0(bib_entry, "  ", col_name, " = {", value, "},\n")
}
}
# Close the BibTeX entry
bib_entry <- paste0(bib_entry, "}\n\n")
# Write the entry to the file
writeLines(bib_entry, file_conn)
}
# Close the file connection
close(file_conn)
message("BibTeX file created at: ", file_path)
}
make_pages <- function(projects) {
# Loop through each project and create corresponding .md file
for (i in seq_len(nrow(projects))) {
# Extract fields from the current row
handle <- projects$handle[i]
title <- projects$title[i]
subtitle <- projects$subtitle[i]
description <- projects$description[i]
img <- projects$img[i]
category <- projects$category[i]
proj <- projects$proj[i]
# Define the content of the markdown file
content <- glue("
---
layout: page
title: {title}
img: {img}
importance: 2
category: {category}
---
## Project overview
<div class=\"publications\">
{{% bibliography -f projects -q @*[proj~={proj}]* %}}
</div>
## Documents
<div class=\"publications\">
{{% bibliography -f papers -q @*[proj~={proj}]* %}}
</div>
")
# Define the file path
file_path <- file.path("_projects", paste0(handle, ".md"))
# Write the content to the .md file
writeLines(content, file_path)
}
message("Markdown pages have been generated and saved in '_projects/'.")
}
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
# Move files
file.copy(list.files("_projects", full.names = TRUE), "_projects", recursive = TRUE)
file.copy("projects.bib", "_bibliography/projects.bib", overwrite = TRUE)
library(readxl)
make_bib <- function(data, file_path = "projects.bib") {
# Ensure data is sorted by 'theme'
if ("theme" %in% colnames(data)) {
sorted_data <- data[order(data$theme), ]
} else {
sorted_data <- data
}
# Open a connection to the output file
file_conn <- file(file_path, "w")
# Iterate over each row to create BibTeX entries
for (i in seq_len(nrow(sorted_data))) {
row <- sorted_data[i, ]
# Handle must be used for the BibTeX key
if (!"handle" %in% colnames(row)) {
stop("The data must have a 'handle' column for the BibTeX entry key.")
}
if (!"type" %in% colnames(row)) {
stop("The data must have a 'type' column for the BibTeX entry type.")
}
# Start the BibTeX entry
bib_entry <- paste0("@", row$type, "{", row$handle, ",\n")
# Loop through the columns and add each as a BibTeX field
for (col_name in colnames(row)) {
if (col_name %in% c("handle", "type")) next  # Skip handle and type for the key and entry type
# Get the value and format it
value <- row[[col_name]]
if (!is.na(value)) {
bib_entry <- paste0(bib_entry, "  ", col_name, " = {", value, "},\n")
}
}
# Close the BibTeX entry
bib_entry <- paste0(bib_entry, "}\n\n")
# Write the entry to the file
writeLines(bib_entry, file_conn)
}
# Close the file connection
close(file_conn)
message("BibTeX file created at: ", file_path)
}
make_pages <- function(projects) {
# Loop through each project and create corresponding .md file
for (i in seq_len(nrow(projects))) {
# Extract fields from the current row
handle <- projects$handle[i]
title <- projects$title[i]
subtitle <- projects$subtitle[i]
description <- projects$description[i]
img <- projects$img[i]
category <- projects$category[i]
proj <- projects$proj[i]
# Define the content of the markdown file
content <- glue("
---
layout: page
title: {title}
img: {img}
importance: 2
category: {category}
---
## Project overview
<div class=\"publications\">
{{% bibliography -f projects -q @*[proj~={proj}]* %}}
</div>
## Documents
<div class=\"publications\">
{{% bibliography -f papers -q @*[proj~={proj}]* %}}
</div>
")
# Define the file path
file_path <- file.path("_projects", paste0(handle, ".md"))
# Write the content to the .md file
writeLines(content, file_path)
}
message("Markdown pages have been generated and saved in '_projects/'.")
}
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(readxl)
make_bib <- function(data, file_path = "projects.bib") {
# Ensure data is sorted by 'theme'
if ("theme" %in% colnames(data)) {
sorted_data <- data[order(data$theme), ]
} else {
sorted_data <- data
}
# Open a connection to the output file
file_conn <- file(file_path, "w")
# Iterate over each row to create BibTeX entries
for (i in seq_len(nrow(sorted_data))) {
row <- sorted_data[i, ]
# Handle must be used for the BibTeX key
if (!"handle" %in% colnames(row)) {
stop("The data must have a 'handle' column for the BibTeX entry key.")
}
if (!"type" %in% colnames(row)) {
stop("The data must have a 'type' column for the BibTeX entry type.")
}
# Start the BibTeX entry
bib_entry <- paste0("@", row$type, "{", row$handle, ",\n")
# Loop through the columns and add each as a BibTeX field
for (col_name in colnames(row)) {
if (col_name %in% c("handle", "type")) next  # Skip handle and type for the key and entry type
# Get the value and format it
value <- row[[col_name]]
if (!is.na(value)) {
bib_entry <- paste0(bib_entry, "  ", col_name, " = {", value, "},\n")
}
}
# Close the BibTeX entry
bib_entry <- paste0(bib_entry, "}\n\n")
# Write the entry to the file
writeLines(bib_entry, file_conn)
}
# Close the file connection
close(file_conn)
message("BibTeX file created at: ", file_path)
}
make_pages <- function(projects) {
# Loop through each project and create corresponding .md file
for (i in seq_len(nrow(projects))) {
# Extract fields from the current row
handle <- projects$handle[i]
title <- projects$title[i]
subtitle <- projects$subtitle[i]
description <- projects$description[i]
img <- projects$img[i]
category <- projects$category[i]
proj <- projects$proj[i]
# Define the content of the markdown file
content <- glue("
---
layout: page
title: {title}
img: {img}
importance: 2
category: {category}
---
## Project overview
<div class=\"publications\">
{{% bibliography -f projects -q @*[proj~={proj}]* %}}
</div>
## Documents
<div class=\"publications\">
{{% bibliography -f papers -q @*[proj~={proj}]* %}}
</div>
")
# Define the file path
file_path <- file.path("_projects", paste0(handle, ".md"))
# Write the content to the .md file
writeLines(content, file_path)
}
message("Markdown pages have been generated and saved in '_projects/'.")
}
library(readxl)
make_bib <- function(data, file_path = "projects.bib") {
# Ensure data is sorted by 'theme'
if ("theme" %in% colnames(data)) {
sorted_data <- data[order(data$theme), ]
} else {
sorted_data <- data
}
# Open a connection to the output file
file_conn <- file(file_path, "w")
# Iterate over each row to create BibTeX entries
for (i in seq_len(nrow(sorted_data))) {
row <- sorted_data[i, ]
# Handle must be used for the BibTeX key
if (!"handle" %in% colnames(row)) {
stop("The data must have a 'handle' column for the BibTeX entry key.")
}
if (!"type" %in% colnames(row)) {
stop("The data must have a 'type' column for the BibTeX entry type.")
}
# Start the BibTeX entry
bib_entry <- paste0("@", row$type, "{", row$handle, ",\n")
# Loop through the columns and add each as a BibTeX field
for (col_name in colnames(row)) {
if (col_name %in% c("handle", "type")) next  # Skip handle and type for the key and entry type
# Get the value and format it
value <- row[[col_name]]
if (!is.na(value)) {
bib_entry <- paste0(bib_entry, "  ", col_name, " = {", value, "},\n")
}
}
# Close the BibTeX entry
bib_entry <- paste0(bib_entry, "}\n\n")
# Write the entry to the file
writeLines(bib_entry, file_conn)
}
# Close the file connection
close(file_conn)
message("BibTeX file created at: ", file_path)
}
make_pages <- function(projects) {
# Loop through each project and create corresponding .md file
for (i in seq_len(nrow(projects))) {
# Extract fields from the current row
handle <- projects$handle[i]
title <- projects$title[i]
subtitle <- projects$subtitle[i]
description <- projects$description[i]
img <- projects$img[i]
category <- projects$category[i]
proj <- projects$proj[i]
# Define the content of the markdown file
content <- glue("
---
layout: page
title: {title}
img: {img}
importance: 2
category: {category}
---
## Project overview
<div class=\"publications\">
{{% bibliography -f projects -q @*[proj~={proj}]* %}}
</div>
## Documents
<div class=\"publications\">
{{% bibliography -f papers -q @*[proj~={proj}]* %}}
</div>
")
# Define the file path
file_path <- file.path("_projects", paste0(handle, ".md"))
# Write the content to the .md file
writeLines(content, file_path)
}
message("Markdown pages have been generated and saved in '_projects/'.")
}
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
library(readxl)
make_bib <- function(data, file_path = "projects.bib") {
# Ensure data is sorted by 'theme'
if ("theme" %in% colnames(data)) {
sorted_data <- data[order(data$theme), ]
} else {
sorted_data <- data
}
# Open a connection to the output file
file_conn <- file(file_path, "w")
# Iterate over each row to create BibTeX entries
for (i in seq_len(nrow(sorted_data))) {
row <- sorted_data[i, ]
# Handle must be used for the BibTeX key
if (!"handle" %in% colnames(row)) {
stop("The data must have a 'handle' column for the BibTeX entry key.")
}
if (!"type" %in% colnames(row)) {
stop("The data must have a 'type' column for the BibTeX entry type.")
}
# Start the BibTeX entry
bib_entry <- paste0("@", row$type, "{", row$handle, ",\n")
# Loop through the columns and add each as a BibTeX field
for (col_name in colnames(row)) {
if (col_name %in% c("handle", "type")) next  # Skip handle and type for the key and entry type
# Get the value and format it
value <- row[[col_name]]
if (!is.na(value)) {
bib_entry <- paste0(bib_entry, "  ", col_name, " = {", value, "},\n")
}
}
# Close the BibTeX entry
bib_entry <- paste0(bib_entry, "}\n\n")
# Write the entry to the file
writeLines(bib_entry, file_conn)
}
# Close the file connection
close(file_conn)
message("BibTeX file created at: ", file_path)
}
make_pages <- function(projects) {
# Loop through each project and create corresponding .md file
for (i in seq_len(nrow(projects))) {
# Extract fields from the current row
handle <- projects$handle[i]
title <- projects$title[i]
subtitle <- projects$subtitle[i]
description <- projects$description[i]
img <- projects$img[i]
category <- projects$category[i]
proj <- projects$proj[i]
# Define the content of the markdown file
content <- glue("
---
layout: page
title: {title}
img: {img}
importance: 2
category: {category}
---
## Project overview
<div class=\"publications\">
{{% bibliography -f projects -q @*[proj~={proj}]* %}}
</div>
## Documents
<div class=\"publications\">
{{% bibliography -f papers -q @*[proj~={proj}]* %}}
</div>
")
# Define the file path
file_path <- file.path("_projects", paste0(handle, ".md"))
# Write the content to the .md file
writeLines(content, file_path)
}
message("Markdown pages have been generated and saved in '_projects/'.")
}
library(glue)
library(readxl)
source("../IPI Research/15 www/web_helpers/code/helpers.R")
projects <- read_xlsx("../IPI Research/15 www/web_helpers/projects.xlsx")
make_bib(projects)
make_pages(projects)
